# クラスとは
- 実体化できる設計図
- クラスには、実体化後の振舞いが定義されている、実体化したものをインスタンスと呼ぶ。
- クラスを元に複数のインスタンスを作れる。各々のインスタンスは、異なるインスタンス変数を格納できる。
- イニシャライザは、実体化時に必ず実行されるメソッド。何かしらの数値やプロパティをセットすることが多い

基本的には、オブジェクトの中身は参照させない、オブジェクトの振舞いや状態はメソッドの呼び出し結果で変わるべきだから

でも、外部から操作されるのがよさそうなオブジェクト(APIとか)は、外から参照したり、いじれたほうがよい、そういうときにアクセサを使う
=>railsは動的にページを作ってるし、アクセサを使いまくってるってこと？

消しちゃ駄目、中身を変えてはならない

関数型は元の状態を残したまま、新しいものを作る
before and afterを持ってる

## オブジェクト指向
# カプセル化
このオブジェクトにxxさせる、という発想で組むこと

selfはメソッドを実行しているオブジェクト自身を指す

self
private

メソッドの中というのは、オブジェクトの中にいる

protectedメソッドは、同じクラスからできたオブジェクトしか呼び出せない
privateメソッドは、実行しているその特定のオブジェクトしか呼び出せない

# 継承
- 新しく作ったクラスが、継承元のクラスのメソッドを呼び出せること
- 親クラスのメソッドを部分的に書き換えたい時に使える

# ポリモーフィズム
- 同じ名前のメソッドを呼び出すが、オブジェクトによって振舞いを変えること
- これを実現するためには、オブジェクトが適切にカプセル化されている必要がある。オブジェクトが、正しい振舞いを知っている、という状態で、カプセル化と表裏一体

- この実装がわかりやすい
https://github.com/fkagami/ruby3/blob/master/hello_composition.rb
外との接点があるインターフェイスを統一するイメージ

 - 元クラスをnewしたときに、インスタンス変数に特定の振舞いをさせたいオブジェクトを与えておく(セレクタ変数に与える） 元クラスの実装の中に、あるメソッドを定義するが、それをセレクタ変数（中身は特定の振舞いを持つオブジェクト）から実行させることとする。各オブジェクトそれぞれの振舞いを、classの中に定義しておく、みたいな感じで綺麗にまとめられる

- オブジェクト指向の強みは、内部にオブジェクトが利用するデータをもてる、同時に複数オブジェクトを持てること



Eng hello
Jphello

インターフェイス的な感じで使える

別に作れる
同じメソッドさえあれば
インターフェイスさえ同じだからいい

java　インターフェイスだけを定義するというやりかた

全部Helloクラスになる
Mysql　Posger　とか、findクラス

active recordもパターン
active recordパターンの実装によって書かれたもの？
裏側の仕組みを隠蔽して、active recordパターンを使ってるだけ

# テンプレートメソッドパターン
基底クラスで実装されていないメソッドを穴埋め的に派生クラスで埋める、という考え方

デザインパターン　Active Record


